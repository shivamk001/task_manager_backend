import express, { Request, Response, NextFunction } from "express";
import bodyParser from "body-parser";
import cookieSession from 'cookie-session';

import AuthRouter from './routes/auth';
import TaskRouter from './routes/task';
import errorHandlingMiddleware from "./middlewares/errorHandler";
import logger from "./utils/logger";

const app = express();


/**
 * To parse incoming request bodies.
 * 
 * @middleware
 */
app.use(bodyParser.json());

/**
 * Send cookie with response.
 * 
 * @middleware
 */
app.use(cookieSession({
    signed: false,
    secure: process.env['NODE_ENV']=='production',
    // domain: process.env.COOKIE_DOMAIN
}));

/**
 * Logs every incoming HTTP request.
 *
 * This middleware captures the request URL and method
 * and logs them using the application logger.
 *
 * @middleware
 * @param req - Express Request object
 * @param res - Express Response object
 * @param next - Express Next function to pass control to the next middleware
 */
app.use((req: Request, res: Response, next: NextFunction) => {
    logger.info(`New Request: ${req.url}, ${req.method}`);
    next();
});


/**
 * GET /uptime
 * 
 * Returns a message confirming that the server is operational.
 * 
 * @route GET /uptime
 * @group Health Check
 * @returns {string} 200 - "Up and running"
 */
app.get('/uptime', (req: Request, res: Response) => {
    res.send('Up and running');
});

/**
 * Mounts the authentication routes.
 *
 * All authentication-related endpoints (e.g., login, signup, logout)
 * are handled by the `AuthRouter`.  
 *
 * Example routes provided by `AuthRouter`:
 * - `POST /auth/login`
 * - `POST /auth/register`
 * - `GET /auth/logout`
 *
 * @see AuthRouter
 */
app.use(AuthRouter);

/**
 * Mounts the task routes.
 * All task-related endpoints (e.g. creation, deletion, updation)
 * are handled by the `TaskRouter`
 * 
 * Example routes provided by `TaskRouter`:
 * - `GET /tasks`
 * - `POST /tasks`
 * - `PUT /tasks/:taskId`
 */
app.use('/tasks', TaskRouter);

/**
 * Error handling middleware.
 * 
 * This middleware captures all errors generated by routes
 * and sends them as response to client.
 * 
 * @middleware
 */
app.use(errorHandlingMiddleware);

export default app; 
